name: Deploy Sabs v2 to Staging

on:
  push:
    branches: [master, develop]
  workflow_dispatch:
    inputs:
      force_deploy:
        description: 'Force deployment even if tests fail'
        required: false
        default: 'false'

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  REGION: us-central1
  ENVIRONMENT: staging
  
jobs:
  # Job 1: Code Quality and Testing
  quality-checks:
    name: Code Quality & Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install root dependencies
      run: npm ci

    - name: Install frontend dependencies
      working-directory: frontend
      run: npm ci

    - name: Run frontend linting
      working-directory: frontend
      run: npm run lint

    - name: Run frontend type checking
      working-directory: frontend
      run: npx tsc --noEmit

    - name: Run frontend tests
      working-directory: frontend
      run: npm run test -- --coverage

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: |
          frontend/coverage/
          frontend/test-results.xml

  # Job 2: Security Scanning
  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run npm audit for frontend
      working-directory: frontend
      run: npm audit --audit-level moderate || true

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-results.sarif'

  # Job 3: Infrastructure Validation
  infrastructure-validation:
    name: Terraform Validation
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: infra/terraform
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.5.0

    - name: Terraform Format Check
      run: terraform fmt -check

    - name: Terraform Init
      run: terraform init -backend=false

    - name: Terraform Validate
      run: terraform validate

    - name: Run tfsec security scan
      uses: aquasecurity/tfsec-action@v1.0.0
      with:
        working_directory: infra/terraform

  # Job 4: Build and Push Images
  build-images:
    name: Build & Push Docker Images
    runs-on: ubuntu-latest
    needs: [quality-checks, security-scan]
    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/develop' || github.event.inputs.force_deploy == 'true'
    
    strategy:
      matrix:
        service: [frontend, identity-service, company-service, accounts-service, mobile-service]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}

    - name: Configure Docker for GCR
      run: gcloud auth configure-docker

    - name: Build Frontend Docker image
      if: matrix.service == 'frontend'
      run: |
        docker build \
          -f frontend/Dockerfile \
          -t gcr.io/$PROJECT_ID/sabs-v2-frontend:${{ github.sha }} \
          -t gcr.io/$PROJECT_ID/sabs-v2-frontend:staging \
          -t gcr.io/$PROJECT_ID/sabs-v2-frontend:latest \
          frontend/

    - name: Build Backend Service Docker image
      if: matrix.service != 'frontend'
      run: |
        docker build \
          -f packages/services/${{ matrix.service }}/Dockerfile \
          -t gcr.io/$PROJECT_ID/sabs-v2-${{ matrix.service }}:${{ github.sha }} \
          -t gcr.io/$PROJECT_ID/sabs-v2-${{ matrix.service }}:staging \
          -t gcr.io/$PROJECT_ID/sabs-v2-${{ matrix.service }}:latest \
          .

    - name: Push Docker images
      run: |
        docker push gcr.io/$PROJECT_ID/sabs-v2-${{ matrix.service }}:${{ github.sha }}
        docker push gcr.io/$PROJECT_ID/sabs-v2-${{ matrix.service }}:staging
        docker push gcr.io/$PROJECT_ID/sabs-v2-${{ matrix.service }}:latest

    - name: Output image names
      run: |
        echo "IMAGE_${{ matrix.service }}=gcr.io/$PROJECT_ID/sabs-v2-${{ matrix.service }}:${{ github.sha }}" >> $GITHUB_ENV

  # Job 5: Deploy Infrastructure to Staging
  deploy-infrastructure:
    name: Deploy Infrastructure to Staging
    runs-on: ubuntu-latest
    needs: [infrastructure-validation]
    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/develop' || github.event.inputs.force_deploy == 'true'
    defaults:
      run:
        working-directory: infra/terraform
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.5.0

    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}

    - name: Create staging tfvars
      run: |
        cat > staging.tfvars << EOF
        project_id = "$PROJECT_ID"
        project_name = "sabs-v2"
        environment = "staging"
        region = "us-central1"
        zone = "us-central1-a"
        domain_name = "staging.sabs-v2.com"
        database_tier = "db-g1-small"
        database_disk_size = 20
        database_max_disk_size = 100
        min_instances = 0
        max_instances = 5
        cpu_limit = "1"
        memory_limit = "1Gi"
        enable_debug_mode = true
        enable_detailed_monitoring = true
        backup_retention_days = 7
        terraform_state_bucket = "${{ secrets.TERRAFORM_STATE_BUCKET }}"
        sms_api_key = "${{ secrets.SMS_API_KEY }}"
        openai_api_key = "${{ secrets.OPENAI_API_KEY }}"
        EOF

    - name: Terraform Init
      run: |
        terraform init \
          -backend-config="bucket=${{ secrets.TERRAFORM_STATE_BUCKET }}" \
          -backend-config="prefix=terraform/staging/state"

    - name: Terraform Plan
      run: |
        terraform plan \
          -var-file="staging.tfvars" \
          -out=staging-tfplan

    - name: Terraform Apply
      run: terraform apply staging-tfplan

    - name: Output infrastructure info
      run: terraform output -json > staging-infrastructure-outputs.json

    - name: Upload infrastructure outputs
      uses: actions/upload-artifact@v4
      with:
        name: staging-infrastructure-outputs
        path: infra/terraform/staging-infrastructure-outputs.json

  # Job 6: Deploy Services to Staging
  deploy-services:
    name: Deploy Services to Staging
    runs-on: ubuntu-latest
    needs: [build-images, deploy-infrastructure]
    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/develop' || github.event.inputs.force_deploy == 'true'
    
    strategy:
      matrix:
        service: 
          - name: frontend
            port: 3000
          - name: identity-service
            port: 3001
          - name: company-service
            port: 3002
          - name: accounts-service
            port: 3003
          - name: mobile-service
            port: 3004
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}

    - name: Deploy to Cloud Run
      run: |
        gcloud run deploy sabs-v2-${{ matrix.service.name }} \
          --image=gcr.io/$PROJECT_ID/sabs-v2-${{ matrix.service.name }}:${{ github.sha }} \
          --region=$REGION \
          --platform=managed \
          --allow-unauthenticated \
          --set-env-vars="NODE_ENV=staging" \
          --set-env-vars="PROJECT_ID=$PROJECT_ID" \
          --set-env-vars="ENVIRONMENT=staging" \
          --set-env-vars="PORT=${{ matrix.service.port }}" \
          --memory=1Gi \
          --cpu=1 \
          --min-instances=0 \
          --max-instances=5 \
          --timeout=300 \
          --concurrency=100 \
          --tag=staging

    - name: Configure additional environment variables for frontend
      if: matrix.service.name == 'frontend'
      run: |
        gcloud run services update sabs-v2-frontend \
          --region=$REGION \
          --update-env-vars="NEXT_PUBLIC_API_URL=https://staging-api.sabs-v2.com" \
          --update-env-vars="NEXT_PUBLIC_ENVIRONMENT=staging"

    - name: Configure database connection for backend services
      if: matrix.service.name != 'frontend'
      run: |
        gcloud run services update sabs-v2-${{ matrix.service.name }} \
          --region=$REGION \
          --update-secrets="DB_CONNECTION_STRING=sabs-v2-db-connection:latest" \
          --update-secrets="JWT_SECRET=sabs-v2-jwt-secret:latest"

    - name: Verify deployment
      run: |
        URL=$(gcloud run services describe sabs-v2-${{ matrix.service.name }} \
          --region=$REGION \
          --format="value(status.url)")
        
        echo "Service URL: $URL"
        
        # Wait for service to be ready
        sleep 30
        
        # Health check
        if [ "${{ matrix.service.name }}" = "frontend" ]; then
          HEALTH_PATH="/"
        else
          HEALTH_PATH="/health"
        fi
        
        if curl -f "$URL$HEALTH_PATH" > /dev/null 2>&1; then
          echo "✅ ${{ matrix.service.name }} health check passed"
        else
          echo "❌ ${{ matrix.service.name }} health check failed"
          exit 1
        fi

  # Job 7: Database Migration
  database-migration:
    name: Database Migration
    runs-on: ubuntu-latest
    needs: [deploy-services]
    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/develop' || github.event.inputs.force_deploy == 'true'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}

    - name: Install dependencies
      run: npm ci

    - name: Run database migrations
      run: |
        # Get database connection from Secret Manager
        DB_CONNECTION=$(gcloud secrets versions access latest \
          --secret="sabs-v2-db-connection" \
          --format="get(payload.data)" | base64 -d)
        
        export DATABASE_URL="$DB_CONNECTION"
        
        # Run migrations (adjust based on your migration tool)
        echo "Running database migrations for staging..."
        # npm run migration:run

    - name: Seed staging data
      run: |
        echo "Seeding staging data..."
        # npm run seed:staging

  # Job 8: Integration Tests
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [database-migration]
    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/develop' || github.event.inputs.force_deploy == 'true'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Install dependencies
      working-directory: frontend
      run: npm ci

    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}

    - name: Get service URLs
      run: |
        FRONTEND_URL=$(gcloud run services describe sabs-v2-frontend \
          --region=$REGION --format="value(status.url)")
        IDENTITY_URL=$(gcloud run services describe sabs-v2-identity-service \
          --region=$REGION --format="value(status.url)")
        COMPANY_URL=$(gcloud run services describe sabs-v2-company-service \
          --region=$REGION --format="value(status.url)")
        ACCOUNTS_URL=$(gcloud run services describe sabs-v2-accounts-service \
          --region=$REGION --format="value(status.url)")
        MOBILE_URL=$(gcloud run services describe sabs-v2-mobile-service \
          --region=$REGION --format="value(status.url)")
        
        echo "FRONTEND_URL=$FRONTEND_URL" >> $GITHUB_ENV
        echo "IDENTITY_SERVICE_URL=$IDENTITY_URL" >> $GITHUB_ENV
        echo "COMPANY_SERVICE_URL=$COMPANY_URL" >> $GITHUB_ENV
        echo "ACCOUNTS_SERVICE_URL=$ACCOUNTS_URL" >> $GITHUB_ENV
        echo "MOBILE_SERVICE_URL=$MOBILE_URL" >> $GITHUB_ENV

    - name: Run integration tests
      working-directory: frontend
      run: |
        export NEXT_PUBLIC_API_URL="https://staging-api.sabs-v2.com"
        export API_BASE_URL="https://staging-api.sabs-v2.com"
        export FRONTEND_URL="$FRONTEND_URL"
        export IDENTITY_SERVICE_URL="$IDENTITY_SERVICE_URL"
        export COMPANY_SERVICE_URL="$COMPANY_SERVICE_URL"
        export ACCOUNTS_SERVICE_URL="$ACCOUNTS_SERVICE_URL"
        export MOBILE_SERVICE_URL="$MOBILE_SERVICE_URL"
        
        npm run test:integration || echo "Integration tests completed with warnings"

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: integration-test-results
        path: |
          frontend/integration-test-results/
          frontend/coverage/

  # Job 9: Performance Tests
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: [integration-tests]
    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/develop' || github.event.inputs.force_deploy == 'true'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install k6 for load testing
      run: |
        curl https://github.com/grafana/k6/releases/download/v0.46.0/k6-v0.46.0-linux-amd64.tar.gz -L | tar xvz --strip-components 1

    - name: Get staging URL
      run: |
        STAGING_URL=$(gcloud run services describe sabs-v2-frontend \
          --region=$REGION --format="value(status.url)")
        echo "STAGING_URL=$STAGING_URL" >> $GITHUB_ENV

    - name: Run performance tests
      run: |
        # Create a simple k6 script for staging
        cat > staging-load-test.js << 'EOF'
        import http from 'k6/http';
        import { check, sleep } from 'k6';

        export let options = {
          vus: 10,
          duration: '2m',
          thresholds: {
            http_req_duration: ['p(95)<2000'],
            http_req_failed: ['rate<0.1'],
          },
        };

        export default function () {
          let response = http.get(process.env.STAGING_URL || 'https://staging.sabs-v2.com');
          check(response, {
            'status is 200': (r) => r.status === 200,
            'response time < 2s': (r) => r.timings.duration < 2000,
          });
          sleep(1);
        }
        EOF
        
        # Run load tests
        ./k6 run staging-load-test.js \
          --env STAGING_URL="$STAGING_URL" \
          --out json=staging-performance-results.json

    - name: Upload performance results
      uses: actions/upload-artifact@v4
      with:
        name: staging-performance-results
        path: staging-performance-results.json

  # Job 10: Update DNS and Configure Load Balancer
  configure-staging-access:
    name: Configure Staging Access
    runs-on: ubuntu-latest
    needs: [deploy-services]
    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/develop' || github.event.inputs.force_deploy == 'true'
    
    steps:
    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}

    - name: Get service URLs and configure staging domain
      run: |
        # Get the load balancer IP
        LB_IP=$(gcloud compute addresses describe sabs-v2-global-ip \
          --global --format="value(address)")
        
        echo "🌍 Staging environment deployed!"
        echo "Load Balancer IP: $LB_IP"
        echo "Please configure DNS:"
        echo "  staging.sabs-v2.com A $LB_IP"
        echo "  staging-api.sabs-v2.com A $LB_IP"
        
        # Save URLs for notification
        FRONTEND_URL=$(gcloud run services describe sabs-v2-frontend \
          --region=$REGION --format="value(status.url)")
        
        echo "FRONTEND_URL=$FRONTEND_URL" >> $GITHUB_ENV
        echo "LB_IP=$LB_IP" >> $GITHUB_ENV

  # Job 11: Notify Deployment
  notify-deployment:
    name: Notify Staging Deployment Status
    runs-on: ubuntu-latest
    needs: [performance-tests, configure-staging-access]
    if: always() && (github.ref == 'refs/heads/master' || github.ref == 'refs/heads/develop' || github.event.inputs.force_deploy == 'true')
    
    steps:
    - name: Send success notification
      if: needs.performance-tests.result == 'success' && needs.configure-staging-access.result == 'success'
      uses: 8398a7/action-slack@v3
      with:
        status: success
        text: |
          🚀 Sabs v2 **STAGING** deployment successful!
          
          **Environment**: staging.sabs-v2.com
          **Services Deployed**: Frontend, Identity, Company, Accounts, Mobile
          **Load Balancer IP**: ${{ env.LB_IP }}
          **Direct Frontend URL**: ${{ env.FRONTEND_URL }}
          
          All services are running and tests passed ✅
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}

    - name: Send failure notification
      if: needs.performance-tests.result != 'success' || needs.configure-staging-access.result != 'success'
      uses: 8398a7/action-slack@v3
      with:
        status: failure
        text: |
          ❌ Sabs v2 **STAGING** deployment failed!
          
          Please check the GitHub Actions logs and fix issues before proceeding.
          
          **Performance Tests**: ${{ needs.performance-tests.result }}
          **Configuration**: ${{ needs.configure-staging-access.result }}
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}

  # Job 12: Security Monitoring
  security-monitoring:
    name: Post-Deployment Security Check
    runs-on: ubuntu-latest
    needs: [configure-staging-access]
    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/develop' || github.event.inputs.force_deploy == 'true'
    
    steps:
    - name: Wait for DNS propagation
      run: sleep 60

    - name: Check staging SSL certificates
      run: |
        echo "Checking SSL certificate for staging.sabs-v2.com"
        # Note: This will work once DNS is configured
        # openssl s_client -connect staging.sabs-v2.com:443 -servername staging.sabs-v2.com < /dev/null 2>/dev/null | openssl x509 -text -noout

    - name: Security headers check
      run: |
        FRONTEND_URL=$(gcloud run services describe sabs-v2-frontend \
          --region=$REGION --format="value(status.url)")
        
        echo "Checking security headers for: $FRONTEND_URL"
        curl -I "$FRONTEND_URL" | grep -E "(X-Frame-Options|X-Content-Type-Options|X-XSS-Protection)" || true

    - name: Check for exposed secrets
      run: |
        FRONTEND_URL=$(gcloud run services describe sabs-v2-frontend \
          --region=$REGION --format="value(status.url)")
        
        # Check if any secrets are exposed in headers or responses
        response=$(curl -s "$FRONTEND_URL")
        if echo "$response" | grep -i "secret\|key\|password\|token"; then
          echo "⚠️ Potential secret exposure detected in staging"
          exit 1
        fi
        
        echo "✅ No secrets exposed in staging environment"