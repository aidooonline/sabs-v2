name: Deploy Sabs v2

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  REGION: us-central1
  
jobs:
  # Job 1: Code Quality and Testing
  quality-checks:
    name: Code Quality & Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run linting
      run: npm run lint

    - name: Run type checking
      run: npx tsc --noEmit

    - name: Run tests
      run: npm run test

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: |
          coverage/
          test-results.xml

  # Job 2: Security Scanning
  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run npm audit
      run: npm audit --audit-level moderate

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-results.sarif'

  # Job 3: Infrastructure Validation
  infrastructure-validation:
    name: Terraform Validation
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: infra/terraform
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.5.0

    - name: Terraform Format Check
      run: terraform fmt -check

    - name: Terraform Init
      run: terraform init -backend=false

    - name: Terraform Validate
      run: terraform validate

    - name: Run tfsec security scan
      uses: aquasecurity/tfsec-action@v1.0.0
      with:
        working_directory: infra/terraform

  # Job 4: Build and Push Images
  build-images:
    name: Build & Push Docker Images
    runs-on: ubuntu-latest
    needs: [quality-checks, security-scan]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    
    strategy:
      matrix:
        service: [identity-service, company-service]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}

    - name: Configure Docker for GCR
      run: gcloud auth configure-docker

    - name: Build Docker image
      run: |
        docker build \
          -f packages/services/${{ matrix.service }}/Dockerfile \
          -t gcr.io/$PROJECT_ID/sabs-v2-${{ matrix.service }}:${{ github.sha }} \
          -t gcr.io/$PROJECT_ID/sabs-v2-${{ matrix.service }}:latest \
          .

    - name: Push Docker image
      run: |
        docker push gcr.io/$PROJECT_ID/sabs-v2-${{ matrix.service }}:${{ github.sha }}
        docker push gcr.io/$PROJECT_ID/sabs-v2-${{ matrix.service }}:latest

    - name: Output image names
      run: |
        echo "IMAGE_${{ matrix.service }}=gcr.io/$PROJECT_ID/sabs-v2-${{ matrix.service }}:${{ github.sha }}" >> $GITHUB_ENV

  # Job 5: Deploy Infrastructure (Production only)
  deploy-infrastructure:
    name: Deploy Infrastructure
    runs-on: ubuntu-latest
    needs: [infrastructure-validation]
    if: github.ref == 'refs/heads/main'
    defaults:
      run:
        working-directory: infra/terraform
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.5.0

    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}

    - name: Terraform Init
      run: |
        terraform init \
          -backend-config="bucket=${{ secrets.TERRAFORM_STATE_BUCKET }}" \
          -backend-config="prefix=terraform/state"

    - name: Terraform Plan
      run: |
        terraform plan \
          -var="project_id=$PROJECT_ID" \
          -var="environment=production" \
          -var="sms_api_key=${{ secrets.SMS_API_KEY }}" \
          -var="openai_api_key=${{ secrets.OPENAI_API_KEY }}" \
          -out=tfplan

    - name: Terraform Apply
      run: terraform apply tfplan

    - name: Output infrastructure info
      run: terraform output -json > infrastructure-outputs.json

    - name: Upload infrastructure outputs
      uses: actions/upload-artifact@v4
      with:
        name: infrastructure-outputs
        path: infra/terraform/infrastructure-outputs.json

  # Job 6: Deploy Services
  deploy-services:
    name: Deploy Services
    runs-on: ubuntu-latest
    needs: [build-images, deploy-infrastructure]
    if: github.ref == 'refs/heads/main'
    
    strategy:
      matrix:
        service: [identity-service, company-service]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}

    - name: Deploy to Cloud Run
      run: |
        gcloud run deploy sabs-v2-${{ matrix.service }} \
          --image=gcr.io/$PROJECT_ID/sabs-v2-${{ matrix.service }}:${{ github.sha }} \
          --region=$REGION \
          --platform=managed \
          --allow-unauthenticated \
          --set-env-vars="NODE_ENV=production" \
          --set-env-vars="PROJECT_ID=$PROJECT_ID" \
          --memory=1Gi \
          --cpu=1 \
          --min-instances=1 \
          --max-instances=10 \
          --timeout=300 \
          --concurrency=100

    - name: Verify deployment
      run: |
        URL=$(gcloud run services describe sabs-v2-${{ matrix.service }} \
          --region=$REGION \
          --format="value(status.url)")
        
        echo "Service URL: $URL"
        
        # Wait for service to be ready
        sleep 30
        
        # Health check
        if curl -f "$URL/health" > /dev/null 2>&1; then
          echo "✅ ${{ matrix.service }} health check passed"
        else
          echo "❌ ${{ matrix.service }} health check failed"
          exit 1
        fi

  # Job 7: Database Migration
  database-migration:
    name: Database Migration
    runs-on: ubuntu-latest
    needs: [deploy-services]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}

    - name: Install dependencies
      run: npm ci

    - name: Run database migrations
      run: |
        # Get database connection from Secret Manager
        DB_CONNECTION=$(gcloud secrets versions access latest \
          --secret="sabs-v2-db-connection" \
          --format="get(payload.data)" | base64 -d)
        
        export DATABASE_URL="$DB_CONNECTION"
        
        # Run migrations (adjust based on your migration tool)
        npm run migration:run

    - name: Seed initial data
      run: |
        # Seed development data if needed
        if [ "${{ github.ref }}" = "refs/heads/develop" ]; then
          npm run seed:dev
        fi

  # Job 8: Integration Tests
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [database-migration]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Install dependencies
      run: npm ci

    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}

    - name: Get service URLs
      run: |
        IDENTITY_URL=$(gcloud run services describe sabs-v2-identity-service \
          --region=$REGION --format="value(status.url)")
        COMPANY_URL=$(gcloud run services describe sabs-v2-company-service \
          --region=$REGION --format="value(status.url)")
        
        echo "IDENTITY_SERVICE_URL=$IDENTITY_URL" >> $GITHUB_ENV
        echo "COMPANY_SERVICE_URL=$COMPANY_URL" >> $GITHUB_ENV

    - name: Run integration tests
      run: |
        export API_BASE_URL="https://api.sabsv2.com"
        export IDENTITY_SERVICE_URL="$IDENTITY_SERVICE_URL"
        export COMPANY_SERVICE_URL="$COMPANY_SERVICE_URL"
        
        npm run test:integration

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: integration-test-results
        path: |
          integration-test-results/
          coverage/

  # Job 9: Performance Tests
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: [integration-tests]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run performance tests
      run: |
        # Install k6 for load testing
        curl https://github.com/grafana/k6/releases/download/v0.46.0/k6-v0.46.0-linux-amd64.tar.gz -L | tar xvz --strip-components 1
        
        # Run load tests
        ./k6 run scripts/load-test.js \
          --env API_BASE_URL="https://api.sabsv2.com" \
          --out json=performance-results.json

    - name: Upload performance results
      uses: actions/upload-artifact@v4
      with:
        name: performance-results
        path: performance-results.json

  # Job 10: Notify Deployment
  notify-deployment:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [performance-tests]
    if: always() && (github.ref == 'refs/heads/main')
    
    steps:
    - name: Send success notification
      if: needs.performance-tests.result == 'success'
      uses: 8398a7/action-slack@v3
      with:
        status: success
        text: "🚀 Sabs v2 deployment successful! All services are running and tests passed."
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}

    - name: Send failure notification
      if: needs.performance-tests.result != 'success'
      uses: 8398a7/action-slack@v3
      with:
        status: failure
        text: "❌ Sabs v2 deployment failed. Please check the logs and fix issues."
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}

  # Job 11: Security Monitoring
  security-monitoring:
    name: Post-Deployment Security Check
    runs-on: ubuntu-latest
    needs: [deploy-services]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Check SSL certificates
      run: |
        echo "Checking SSL certificate for api.sabsv2.com"
        openssl s_client -connect api.sabsv2.com:443 -servername api.sabsv2.com < /dev/null 2>/dev/null | openssl x509 -text -noout

    - name: Security headers check
      run: |
        curl -I https://api.sabsv2.com | grep -E "(Strict-Transport-Security|X-Frame-Options|X-Content-Type-Options)"

    - name: Check for exposed secrets
      run: |
        # Check if any secrets are exposed in headers or responses
        response=$(curl -s https://api.sabsv2.com/health)
        if echo "$response" | grep -i "secret\|key\|password\|token"; then
          echo "⚠️ Potential secret exposure detected"
          exit 1
        fi